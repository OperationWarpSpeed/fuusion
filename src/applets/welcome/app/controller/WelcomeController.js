/*
 * File: app/controller/WelcomeController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.WelcomeController', {
    extend: 'Ext.app.Controller',

    refs: {
        NewsFrame: '#frame_aboutnews'
    },

    onLaunch: function() {
        if (window.top.reboot_message === true) { // #3528 (avoid alerts if rebooting)
            return;
        }
        this.handleGettingStarted();
        var ctrl = window.WelcomeApp.getController("WelcomeController");

        var url = "/softnas/snserver/snserv.php";

        Ext.getBody().mask("Connecting to Server. Please wait ...");

        Ext.Ajax.request({
            url: url,
            scope: this,
            method : 'POST',
            params : {
                opcode: 'serverTest'
            },
            timeout: 60000,

            success: function(response, opts) {
                Ext.getBody().unmask();
                var reply = Ext.decode(response.responseText);
                if( !reply.success )
                {
                    strMsg = "The server error encountered an error. Unable to continue without a functioning server!";
                    Ext.MessageBox.show({
                        title: 'Server Error',
                        msg: strMsg,
                        buttons: Ext.Msg.OK,
                        closable:false,
                        fn: this.serverInvalidRedirect,
                        icon: Ext.MessageBox.ERROR
                    });
                    return false;
                }
                else
                {
                    var ctrl = window.WelcomeApp.getController("WelcomeController");
                    ctrl.loadLicense();
                    return true;
                }
            },
            failure: function(response, opts) {
                Ext.getBody().unmask();
                strMsg = "The server error encountered an error. Unable to continue without a functioning server!";
                Ext.MessageBox.show({
                    title: 'Server Error',
                    msg: strMsg,
                    buttons: Ext.Msg.OK,
                    closable:false,
                    fn: this.serverInvalidRedirect,
                    icon: Ext.MessageBox.ERROR
                });

                return false;
            }
        });


        return false;


    },

    loadLicense: function() {
        var licenseStore = Ext.getStore("LicenseStore");

        licenseStore.load({
            callback: this.onLicenseLoad,
            scope: this
        });

    },

    onLicenseLoad: function(records, operation, success) {
        if (window.top.reboot_message === true) { // #3528 (avoid alerts if rebooting)
            return;
        }
        var strMsg;

        //
        // First thing we do is check for a valid license before enabling any GUI functionality
        //
        if ( records == null )
        {
            if( ! success ) {   // license subsystem malfunction
                strMsg = "Server Error - unable to continue without functioning server system";
                Ext.MessageBox.show({
                    title: 'Server Error',
                    msg: strMsg,
                    buttons: Ext.Msg.OK,
                    closable:false,
                    fn: this.invalidLicenseRedirect,
                    icon: Ext.MessageBox.ERROR
                });
                return;  // do not proceed with UI start-up
            }
            else
            {
                alert("Unable to contact server - try again later or correct the networking issue.  Exiting.");
            }
            return;
        }

        var data = records[0].data;
        var licValid = data.valid;
        var licStatus = data.status;
        var serverToday = data.today;
        var licExpiration = data.expiration;
        var gracedays = data.gracedays;
        var graceremaining = data.graceremaining;
        var graceperiod = data.graceperiod;
        var licType = data.licensetype;
        var prodType = data.producttype;
        var platform = data.platform;
        var isTrial = data.istrial;
        var isPerpetual = data.is_perpetual;
        var isActivated = data.is_activated;

        // Verify license is OK.  If not, issue error "status" message to user and redirect top window to license key page.
        if ( ! licValid || licStatus != "Valid License" )
        {

            strMsg = "License Error - unable to continue.<br /><br />Details: " + licStatus;
            Ext.MessageBox.show({
                title: 'License Validation Error',
                msg: strMsg,
                buttons: Ext.Msg.OK,
                closable:false,
                fn: this.invalidLicenseRedirect,
                icon: Ext.MessageBox.ERROR
            });
            return;  // do not proceed with UI start-up
        }

        // Valid license. Check for expiration.

        var now = new Date();                                      // local date/time now on client computer

        var mon, day, year;

        var dateParts = serverToday.split("/");
        year = dateParts[2];
        day = dateParts[1];
        mon = dateParts[0] -1;

        var serverDateToday = new Date(year, mon, day, 0, 0, 1);  // Noon today, server's date/time

        var diffDays = Math.abs( this.daysBetween( serverDateToday, now ) ); // absolute number of days difference (should be 0 to 1 max)

        // Allow up to 2 days difference between client and server date/time for different timezones (client and server must be within 2 days of each other)
        if( diffDays > 2 )  // there's a serious time discrepancy between client and server - could be date/time tampering vs. expiration, no-go
        {
            strMsg = "Invalid date/time on server. Please correct date/time on server to continue.";
            Ext.MessageBox.show({
                title: 'Expired License',
                msg: strMsg,
                buttons: Ext.Msg.OK,
                closable:false,
                //    fn: this.invalidLicenseRedirect,
                icon: Ext.MessageBox.ERROR
            });
            return;  // do not proceed with UI start-up
        }

        // Date/time of server and client match up reasonably


        dateParts = licExpiration.split("/");
        year = dateParts[2];
        day = dateParts[1];
        mon = dateParts[0] -1;


        var dateExpired = new Date(year, mon, day, 0, 0, 1);  // 1 second after midnight on expiration date

        if( now >= dateExpired && ! isPerpetual )  // a subscription-based license has expired
        {
            strMsg = "License and grace period have both expired. Please renew your license and enter a valid license key to continue.";
            Ext.MessageBox.show({
                title: 'Expired License',
                msg: strMsg,
                buttons: Ext.Msg.OK,
                closable:false,
                fn: this.invalidLicenseRedirect,
                icon: Ext.MessageBox.ERROR
            });
            return;  // do not proceed with UI start-up
        }


        if( graceperiod == "1" && ! isPerpetual )  // grace period is in effect
        {
            strMsg = "WARNING: Your license has expired. You only have " + graceremaining + " grace days remaining.<br><br>Renew your license now!";
            Ext.MessageBox.show({
                title: 'Expired License - Grace Period In Effect',
                msg: strMsg,
                buttons: Ext.Msg.OK,
                closable:false,
                fn: this.continueStartup,
                icon: Ext.MessageBox.WARNING
            });
        }

        //
        // Detect license activation status and attach appropriate status tag to news page request
        //
        // <iframe src="https://www.softnas.com/about/news/#news" width="100%" height="100%" frameborder="0" scrolling="auto"></iframe>'
        //
        var newsFrame = document.getElementById("frame_aboutnews");
        var indargs = "?prod=" + prodType + "&platform=" + platform;
        if( isActivated && newsFrame )
        {
            // Set news panel activation indicator to "#act"
            var src = "https://www.softnas.com/about/news/#act" + indargs;
            newsFrame.src = src;
        }
        else if( !isActivated && newsFrame )
        {
            // Set news panel indicator to "#news" to installed
            var src = "https://www.softnas.com/about/news/#news" + indargs;
            newsFrame.src = src;
        }


        this.continueStartup(); // continue normal startup sequence with valid license

    },

    serverInvalidRedirect: function() {
        window.top.location.href = "/softnas/html/servererror.php"; // redirect to server error page
    },

    invalidLicenseRedirect: function() {
        window.top.location.href = "/softnas/html/licenselimit.php"; // redirect to license error page

    },

    onIniLoad: function(records, operation, success) {
        if (window.top.reboot_message === true) { // #3528 (avoid alerts if rebooting)
            return;
        }
        // see if the license agreement has been acknowledged yet.  If not, display it in modal window and do not allow user
        // to proceed to use any other StorageCenter features until the license has been agreed upon.
        if ( records == null )
        {
            alert("Unable to contact server - try again later or correct the networking issue.");
            return;
        }
    },

    daysBetween: function(date1, date2) {
        // Returns days between two dates

        //Get 1 day in milliseconds
        var one_day=1000*60*60*24;

        // Convert both dates to milliseconds
        var date1_ms = date1.getTime();
        var date2_ms = date2.getTime();

        // Calculate the difference in milliseconds
        var difference_ms = date2_ms - date1_ms;

        // Convert back to days and return
        return Math.round(difference_ms/one_day);

    },

    continueStartup: function() {
        //
        // We have a valid license - continue startup sequence
        //

        //
        // Continue by loading IniFileStore and initialize StorageCenter UI for use
        //

        var iniStore = Ext.getStore("IniFileStore");

        iniStore.load({
            callback: this.onIniLoad,
            scope: this
        });


    },

    handleGettingStarted: function() {
        if (window.top.agreement !== undefined && window.top.agreement === true &&
            window.top.show_getting_started !== undefined && window.top.show_getting_started === "1") {

            var maincontroller = top.window.maincontroller;
            this.isLicenseValid(function (isValid) {
                if (isValid) {
                    maincontroller.launchNodeByTitle( "Getting Started" );
                }
            });
        }
    },

    isLicenseValid: function(callback) {
        var url = "/softnas/snserver/snserv.php";
        Ext.Ajax.request({
            url: url,
            scope: this,
            method: 'POST',
            params: {
                opcode: 'licenseinfo',
                fulldetails: '1'
            },
            timeout: 30000,

            success: function (response, opts) {
                if (response) {
                    var reply = Ext.decode(response.responseText);
                    callback(reply.records.valid);
                }
            },
            failure: function(response, opts) {
                Ext.Msg.alert('Operation Failed', "Error contacting server. Please resolve any network issues and try again.");
            }
        });
    }

});
