/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.application({
    name: 'administrator',

    popMsg: function(title, str) {
        var ctrl = window.appAdmin;
        var insertPoint = document.body;

        // #3954, #3957, #3958 - Find previous message and destroy it if it exists
        var prevMsg = Ext.get('msg-div');
        if(prevMsg) {
            prevMsg.destroy();
        }

        var msgCt;
        if(!msgCt){
            msgCt = Ext.core.DomHelper.insertFirst(insertPoint, {id:'msg-div'}, true);
        }
        var s = Ext.String.format.apply(String, Array.prototype.slice.call(arguments, 1));
        var m = Ext.core.DomHelper.append(msgCt, ctrl.createBox(title, str), true);
        m.hide();
        m.slideIn('t').ghost("t", { delay: 1500, remove: true});
    },

    createBox: function(t, s) {
        return '<div class="msg"><h3>' + t + '</h3><p>' + s + '</p></div>';
    },

    launch: function() {
        Ext.create('administrator.view.MyViewport');
        window.appAdmin = this;

        // Adding ids to Ext.MessageBox buttons:
        window.setMsgButtonsIds = function(){
            var i = 0, btn_text = "",
                msg_box = document.getElementsByClassName('x-message-box')[0],
                //buttons = msg_box.getElementsByTagName('button');
                buttons = msg_box.getElementsByClassName('x-btn-inner'); // Extjs5

            for(i = 0; i < buttons.length; i++){
                btn_text = buttons[i].textContent;
                if(btn_text == 'OK' || btn_text == 'Yes' || btn_text == 'No' || btn_text == 'Cancel'){
                    buttons[i].id = "msgBtn" + btn_text;
                }
            }
        };

        Ext.override(Ext.MessageBox, {
            show: function(){ this.callParent(arguments); window.setMsgButtonsIds(); return this; }
        });


        Ext.Ajax.request({
            url: '/softnas/snserver/snserv.php',
            params: {
                opcode: 'general_settings'
            },
            success: function(response, opts) {
                var reply = Ext.decode(response.responseText);
                if( !reply.success )
                {
                    Ext.Msg.alert('Operation Error', reply.msg);
                } else {
                    var txt_timeout = Ext.ComponentQuery.query("#txt_session_timeout")[0];
                    txt_timeout.setValue(reply.data.timeout);
                }
            },
            failure: function(response, opts) {
                var reply;
                if( response && response.responseText )
                    reply = Ext.decode(response.responseText);

                if( reply && reply.msg )
                    Ext.Msg.alert('Operation Failed', reply.msg);
                else
                    Ext.Msg.alert('Operation Failed', "Error contacting server. Please resolve any network issues and try again.");
            }
        });

    }

});
