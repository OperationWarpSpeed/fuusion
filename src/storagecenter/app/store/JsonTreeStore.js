/*
 * File: app/store/JsonTreeStore.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 */

Ext.define('iFrame.store.JsonTreeStore', {
    extend: 'Ext.data.TreeStore',
    autoLoad: true,
    storeId: 'JsonTreeStore',
    fields: [
        {name: 'id', type: 'string', mapping: 'id'},
        {name: 'text', type: 'string'},
        {name: 'uri', type: 'string'},
        {name: 'disabled', type:'bool', defaultValue:false },
        {name: 'hidden', type:'bool', defaultValue:false },
        {name: 'hideModeOffsets', type:'bool', defaultValue:false }
    ],
    proxy: {
        type: 'ajax',
        url: 'data/tree.json',
        reader: {
            type: 'json'
        }
    },
    listeners: {
        load: 'checkLicense'
    },

    checkLicense: function() {
        var me = this,
            productID = window.top.licenseinfo && window.top.licenseinfo.productID,
            records = [];

        if(!productID || !me.isLoaded()) {
            return;
        }

        if (Util.Util.isCloudEssentials(productID, false)) {
            records.push(me.findRecord('id', 'snapreplicateNode', 0, false, false, true));
        }
        
        if (!Util.Util.isCloudEssentials(productID)) {
            // hide the Volumes Wizard of the menu for no essentials edition - (#14051)
            records.push(me.findRecord('id', 'cloudessentials-volumeswizard', 0, false, false, true));
        }

        if(Util.Util.isCloudEssentials(productID)) {
            records.push(me.findRecord('id', 'flexfilesNode', 0, false, false, true));
            records.push(me.findRecord('id', 'flexfilesArchitectNode', 0, false, false, true));
            records.push(me.findRecord('id', 'flexfilesLiftShiftNode', 0, false, false, true));
            records.push(me.findRecord('id', 'flexfilesSettingsNode', 0, false, false, true));
            records.push(me.findRecord('id', 'ultrafast', 0, false, false, true));
        }

        records.length && me.remove(records);        
        me.commitChanges();
    }
});