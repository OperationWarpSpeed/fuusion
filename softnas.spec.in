#Generated by rpmwand v. 0.9.3 Tue Sep 18 12:27:03 PDT 2012
%define _builddir @FAKEROOT@/
%define _topdir /
%define _buildrootdir @FAKEROOT@
%define _rpmdir @RPMDIR@
%define _tmppath @FAKEROOT@/tmp
%define _sourcedir @FAKEROOT@/..
%define debug_package %{nil}
%define __spec_install_post /bin/true

Summary: SoftNAS Virtual Storage Appliance
Vendor: SoftNAS.com / SoftNAS Inc.
Packager: SoftNAS.com
License: See /var/www/softnas/LICENSE
Group: softnas
URL: http://www.softnas.com/

Name: @NAME@
Version: @VERSION@
Release: @RELEASE@
Source: %name-%version.tar.gz
BuildRoot: @FAKEROOT@/
AutoReqProv: no
#Requires:

%description
SoftNAS(tm) Virtual Storage Appliance

##########################################################################################
# BUILD-TIME SCRIPTS
##########################################################################################
%prep
true "=================================================================================="
true "BEG Build preprocess"
true "END Build preprocess"

%setup -q
true "=================================================================================="
true "BEG Setup"
true "END Setup"

%build
true "=================================================================================="
true "BEG Build"
echo "BUILDROOT: %{buildroot}"
echo "BUILDROOTDIR: %{_buildrootdir}"
echo "PACKAGE-NAME: %{name}"
echo "PACKAGE-VERSION: %{version}"
echo "PACKAGE-RELEASE: %{release}"
true "END Build"


%install
true "=================================================================================="
true "BEG Installation"
#Creating fake Makefile
%{__cat} > "%{_buildrootdir}/%{name}-%{version}/Makefile" <<EOT
install:
	@echo ""
	@echo "Makefile install target here"
	@echo ""
EOT

true "END Installation"

%makeinstall
#true "=================================================================================="
true "BEG make install"

true BUILDROOTDIR:%{_buildrootdir}
%{__rm} -rf "%{_buildrootdir}/%{name}-%{version}/Makefile"
#Installing all contents to fake root
if test ! "%{buildroot}" = "%{_buildrootdir}"; then
	%{__rm} -rf "%{buildroot}"/*
	%{__mkdir} -p "%{buildroot}"
fi
mv "%{_buildrootdir}/%{name}-%{version}"/* "%{buildroot}"

true "END make install"

%clean
true "=================================================================================="

%files -f "@FAKEROOT@/../%{name}-files.txt"

##########################################################################################
# INSTALL/UNINSTALL-TIME SCRIPTS
##########################################################################################
%pretrans
true BEGIN Pre-transaction script
# Usually umask here
umask 007

%pre
true BEGIN Pre-installation script
if test "$1" = "1"; then # Install
	#Place your script pre-install script
	#echo "Pre-install script version:" %{version}>> /tmp/%{name}.log
	:
else # Update ($1 = "2")
	#Place your script pre-update script
	#echo "Pre-update script of new version:" %{version}>> /tmp/%{name}.log
	:
fi

true END Pre-installation script

%post
true BEGIN Post-installation script
if test "$1" = "1"; then # Install
	#Place your script post-install script here
	#echo "Post-install script version:" %{version}>> /tmp/%{name}.log
	:
else # Update ($1 = "2")
	#Place your script post-update script
	#echo "Post-update script of new version:" %{version}>> /tmp/%{name}.log
	:
fi


true END Post-installation script

%preun
true BEGIN Pre-uninstall script
if test "$1" = "0"; then # Uninstall
	#Place your script pre-uninstall script
	#echo "Pre-uninstall script version:" %{version}>> /tmp/%{name}.log
	:
else # Uninstall by new version ($1 = "1")
	#Place your script pre-update script
	#echo "Pre-update script of old version:" %{version}>> /tmp/%{name}.log
	:
fi

true END Pre-uninstall script

%postun
true BEGIN Post-uninstall script
#Place temporary file cleaner here.
#Place user deletion script here.
if test "$1" = "0"; then # Uninstall
	#Place your script post-uninstall script
	echo "Post-uninstall script version:" %{version}>> /tmp/%{name}.log
	:
else # Uninstall by new version ($1 = "1")
	#Place your script post-update script
	echo "Post-update script of old version:" %{version}>> /tmp/%{name}.log
	:
fi

true END Post-uninstall script

%changelog

